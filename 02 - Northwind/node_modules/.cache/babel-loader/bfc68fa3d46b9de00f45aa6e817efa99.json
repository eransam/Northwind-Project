{"ast":null,"code":"import _objectSpread from\"C:/Users/erans/OneDrive/\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/\\u200F\\u200F\\u05EA\\u05D9\\u05E7\\u05D9\\u05D4 \\u05D7\\u05D3\\u05E9\\u05D4/02 - Northwind/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _createClass from\"C:/Users/erans/OneDrive/\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/\\u200F\\u200F\\u05EA\\u05D9\\u05E7\\u05D9\\u05D4 \\u05D7\\u05D3\\u05E9\\u05D4/02 - Northwind/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"C:/Users/erans/OneDrive/\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4/\\u200F\\u200F\\u05EA\\u05D9\\u05E7\\u05D9\\u05D4 \\u05D7\\u05D3\\u05E9\\u05D4/02 - Northwind/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";// Products State - products data needed in the application level:\nexport var ProductsState=/*#__PURE__*/_createClass(function ProductsState(){_classCallCheck(this,ProductsState);this.products=[];});// Products Action Type - any action which can be done on the above products state:\nexport var ProductsActionType;// Products Action - any single object sent to the store during \"dispatch\":\n(function(ProductsActionType){ProductsActionType[\"FetchProducts\"]=\"FetchProducts\";ProductsActionType[\"AddProduct\"]=\"AddProduct\";ProductsActionType[\"UpdateProduct\"]=\"UpdateProduct\";ProductsActionType[\"DeleteProduct\"]=\"DeleteProduct\";})(ProductsActionType||(ProductsActionType={}));// Products Action Creators - function for creating ProductsAction objects. each function creates one Action object:\nexport function fetchProductsAction(products){return{type:ProductsActionType.FetchProducts,payload:products};}export function addProductAction(product){return{type:ProductsActionType.AddProduct,payload:product};}export function updateProductAction(product){return{type:ProductsActionType.UpdateProduct,payload:product};}export function deleteProductAction(id){return{type:ProductsActionType.DeleteProduct,payload:id};}// Products Reducer - the main function performing any action on products state:\n// the new ProductsState() is a default value for the first time only\nexport function productsReducer(){var currentState=arguments.length>0&&arguments[0]!==undefined?arguments[0]:new ProductsState();var action=arguments.length>1?arguments[1]:undefined;// Must duplicate the current state and not touch the given current state: \nvar newState=_objectSpread({},currentState);switch(action.type){case ProductsActionType.FetchProducts:newState.products=action.payload;// Here the payload is the products list.\nbreak;case ProductsActionType.AddProduct:newState.products.push(action.payload);// Here the payload is a single object to add.\nbreak;case ProductsActionType.UpdateProduct:var indexToUpdate=newState.products.findIndex(function(p){return p.id===action.payload.id;});// Here the payload is a single object to update.\nif(indexToUpdate>=0){newState.products[indexToUpdate]=action.payload;}break;case ProductsActionType.DeleteProduct:var indexToDelete=newState.products.findIndex(function(p){return p.id===action.payload;});// Here the payload is the id to delete.\nif(indexToDelete>=0){newState.products.splice(indexToDelete,1);}break;}return newState;}","map":{"version":3,"sources":["C:/Users/erans/OneDrive/שולחן העבודה/‏‏תיקיה חדשה/02 - Northwind/src/Redux/ProductsState.ts"],"names":["ProductsState","products","ProductsActionType","fetchProductsAction","type","FetchProducts","payload","addProductAction","product","AddProduct","updateProductAction","UpdateProduct","deleteProductAction","id","DeleteProduct","productsReducer","currentState","action","newState","push","indexToUpdate","findIndex","p","indexToDelete","splice"],"mappings":"ywBAEA;AACA,UAAaA,CAAAA,aAAb,6FACWC,QADX,CACsC,EADtC,IAIA;AACA,UAAYC,CAAAA,kBAAZ,CAOA;UAPYA,kB,EAAAA,kB,kCAAAA,kB,4BAAAA,kB,kCAAAA,kB,qCAAAA,kB,GAAAA,kB,MAaZ;AACA,MAAO,SAASC,CAAAA,mBAAT,CAA6BF,QAA7B,CAAuE,CAC1E,MAAO,CAAEG,IAAI,CAAEF,kBAAkB,CAACG,aAA3B,CAA0CC,OAAO,CAAEL,QAAnD,CAAP,CACH,CACD,MAAO,SAASM,CAAAA,gBAAT,CAA0BC,OAA1B,CAAiE,CACpE,MAAO,CAAEJ,IAAI,CAAEF,kBAAkB,CAACO,UAA3B,CAAuCH,OAAO,CAAEE,OAAhD,CAAP,CACH,CACD,MAAO,SAASE,CAAAA,mBAAT,CAA6BF,OAA7B,CAAoE,CACvE,MAAO,CAAEJ,IAAI,CAAEF,kBAAkB,CAACS,aAA3B,CAA0CL,OAAO,CAAEE,OAAnD,CAAP,CACH,CACD,MAAO,SAASI,CAAAA,mBAAT,CAA6BC,EAA7B,CAAyD,CAC5D,MAAO,CAAET,IAAI,CAAEF,kBAAkB,CAACY,aAA3B,CAA0CR,OAAO,CAAEO,EAAnD,CAAP,CACH,CAED;AACA;AACA,MAAO,SAASE,CAAAA,eAAT,EAAoG,IAA3EC,CAAAA,YAA2E,2DAA5D,GAAIhB,CAAAA,aAAJ,EAA4D,IAAvCiB,CAAAA,MAAuC,2CAEvG;AACA,GAAMC,CAAAA,QAAQ,kBAAQF,YAAR,CAAd,CAEA,OAAQC,MAAM,CAACb,IAAf,EAEI,IAAKF,CAAAA,kBAAkB,CAACG,aAAxB,CACIa,QAAQ,CAACjB,QAAT,CAAoBgB,MAAM,CAACX,OAA3B,CAAoC;AACpC,MAEJ,IAAKJ,CAAAA,kBAAkB,CAACO,UAAxB,CACIS,QAAQ,CAACjB,QAAT,CAAkBkB,IAAlB,CAAuBF,MAAM,CAACX,OAA9B,EAAwC;AACxC,MAEJ,IAAKJ,CAAAA,kBAAkB,CAACS,aAAxB,CACI,GAAMS,CAAAA,aAAa,CAAGF,QAAQ,CAACjB,QAAT,CAAkBoB,SAAlB,CAA4B,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACT,EAAF,GAASI,MAAM,CAACX,OAAP,CAAeO,EAA5B,EAA7B,CAAtB,CAAoF;AACpF,GAAIO,aAAa,EAAI,CAArB,CAAwB,CACpBF,QAAQ,CAACjB,QAAT,CAAkBmB,aAAlB,EAAmCH,MAAM,CAACX,OAA1C,CACH,CACD,MAEJ,IAAKJ,CAAAA,kBAAkB,CAACY,aAAxB,CACI,GAAMS,CAAAA,aAAa,CAAGL,QAAQ,CAACjB,QAAT,CAAkBoB,SAAlB,CAA4B,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACT,EAAF,GAASI,MAAM,CAACX,OAApB,EAA7B,CAAtB,CAAiF;AACjF,GAAIiB,aAAa,EAAI,CAArB,CAAwB,CACpBL,QAAQ,CAACjB,QAAT,CAAkBuB,MAAlB,CAAyBD,aAAzB,CAAwC,CAAxC,EACH,CACD,MAtBR,CAyBA,MAAOL,CAAAA,QAAP,CACH","sourcesContent":["import ProductModel from \"../Models/ProductModel\";\r\n\r\n// Products State - products data needed in the application level:\r\nexport class ProductsState {\r\n    public products: ProductModel[] = [];\r\n}\r\n\r\n// Products Action Type - any action which can be done on the above products state:\r\nexport enum ProductsActionType {\r\n    FetchProducts = \"FetchProducts\",\r\n    AddProduct = \"AddProduct\",\r\n    UpdateProduct = \"UpdateProduct\",\r\n    DeleteProduct = \"DeleteProduct\"\r\n}\r\n\r\n// Products Action - any single object sent to the store during \"dispatch\":\r\nexport interface ProductsAction {\r\n    type: ProductsActionType;\r\n    payload: any;\r\n}\r\n\r\n// Products Action Creators - function for creating ProductsAction objects. each function creates one Action object:\r\nexport function fetchProductsAction(products: ProductModel[]): ProductsAction {\r\n    return { type: ProductsActionType.FetchProducts, payload: products };\r\n}\r\nexport function addProductAction(product: ProductModel): ProductsAction {\r\n    return { type: ProductsActionType.AddProduct, payload: product };\r\n}\r\nexport function updateProductAction(product: ProductModel): ProductsAction {\r\n    return { type: ProductsActionType.UpdateProduct, payload: product };\r\n}\r\nexport function deleteProductAction(id: number): ProductsAction {\r\n    return { type: ProductsActionType.DeleteProduct, payload: id };\r\n}\r\n\r\n// Products Reducer - the main function performing any action on products state:\r\n// the new ProductsState() is a default value for the first time only\r\nexport function productsReducer(currentState = new ProductsState(), action: ProductsAction): ProductsState {\r\n\r\n    // Must duplicate the current state and not touch the given current state: \r\n    const newState = { ...currentState };\r\n\r\n    switch (action.type) {\r\n\r\n        case ProductsActionType.FetchProducts:\r\n            newState.products = action.payload; // Here the payload is the products list.\r\n            break;\r\n\r\n        case ProductsActionType.AddProduct:\r\n            newState.products.push(action.payload); // Here the payload is a single object to add.\r\n            break;\r\n\r\n        case ProductsActionType.UpdateProduct:\r\n            const indexToUpdate = newState.products.findIndex(p => p.id === action.payload.id); // Here the payload is a single object to update.\r\n            if (indexToUpdate >= 0) {\r\n                newState.products[indexToUpdate] = action.payload;\r\n            }\r\n            break;\r\n\r\n        case ProductsActionType.DeleteProduct:\r\n            const indexToDelete = newState.products.findIndex(p => p.id === action.payload); // Here the payload is the id to delete.\r\n            if (indexToDelete >= 0) {\r\n                newState.products.splice(indexToDelete, 1);\r\n            }\r\n            break;\r\n    }\r\n\r\n    return newState;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}